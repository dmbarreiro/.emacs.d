#+title: dmbarreiro's GNU Emacs Config
#+author: David Martinez Barreiro (dmbarreiro)

* table of contents :toc:
- [[#initial-loading][initial loading]]
  - [[#elpaca-package-manager][elpaca package manager]]
- [[#loading-files][loading files]]
  - [[#buffer-move][buffer move]]
- [[#general-keybindings][general keybindings]]
- [[#graphical-user-interface-tweaks][graphical user interface tweaks]]
  - [[#disable-menubar-toolbars-and-scrollbars][disable menubar, toolbars and scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][display line numbers and truncated lines]]
- [[#all-the-icons][all the icons]]
- [[#ivy-counsel][ivy (counsel)]]
- [[#org-mode][org mode]]
  - [[#enabling-table-of-contents][enabling table of contents]]
  - [[#enabling-org-bullets][enabling org bullets]]
  - [[#disable-electric-indent][disable electric indent]]
  - [[#source-code-block-tag-expansion][source code block tag expansion]]
- [[#shells-and-terminals][shells and terminals]]
  - [[#eshell][eshell]]
  - [[#vterm][vterm]]
  - [[#vterm-toggle][vterm-toggle]]
- [[#rainbow-mode][rainbow mode]]
- [[#move-text][move text]]
- [[#theme][theme]]
- [[#which-key][which-key]]

* initial loading

** elpaca package manager

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                   ,@(when-let ((depth (plist-get order :depth)))
                                                       (list (format "--depth=%d" depth) "--no-single-branch"))
                                                   ,(plist-get order :repo) ,repo))))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use the :wait recipe keyword to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :ensure (:wait t) :demand t)

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  ;;(use-package evil :ensure t :demand t) 

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  ;;(elpaca nil (message "deferred"))
#+end_src

#+begin_src emacs-lisp
  ;; makes sure packages are correctly installed, installing the missing ones
  ;; and avoiding reinstall/updates of already installed packages
  (setq use-package-always-ensure t)
#+end_src

* loading files

** buffer move

#+begin_src emacs-lisp

;; in root of emacs dir with other config files for the moment
;; may be moved to specific lib folder in the future if amount of libs grow
(load (expand-file-name (concat user-emacs-directory "libs/buffer-move")))
  
#+end_src


* general keybindings

#+begin_src emacs-lisp

  ;; clean leader key org mode binding
  (define-key org-mode-map (kbd "M-RET") nil)

  (use-package general
    :ensure (:wait t)
    :demand t
    :config

    (general-create-definer my-leader
      :prefix "M-RET")

    (my-leader
     "b" '(:ignore t :which-key "buffer")
     "b b" '(switch-to-buffer :which-key "Switch buffer")
     "b i" '(ibuffer :wk "Ibuffer")
     "b k" '(kill-this-buffer :which-key "Kill this buffer")
     "b n" '(next-buffer :which-key "Next buffer")
     "b p" '(previous-buffer :which-key "Previous buffer")
     "b r" '(revert-buffer :which-key "Reload buffer"))

    (my-leader
     "e" '(:ignore t :wk "Evaluate")
     "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
     "e d" '(eval-defun :wk "Evaluate defun containing or after point")
     "e e" '(eval-expression :wk "Evaluate an elisp expression")
     "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
     "e r" '(eval-region :wk "Evaluate elisp in region")
     "e h" '(counsel-esh-history :which-key "Eshell history")
     "e s" '(eshell :which-key "Eshell"))

    (my-leader
     "f ." '(find-file :wk "Find file")
     "f ;" '(comment-line :wk "Comment line")
     "f r" '(counsel-recentf :wk "Find recent files")
     "f c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Edit emacs config"))

    (my-leader
      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable")
      "h r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :wk "Reload emacs config"))

    (my-leader
      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t t" '(visual-line-mode :wk "Toggle truncated lines")
      "t v" '(vterm-toggle :wk "Toggle vterm"))

    (my-leader
      "w" '(:ignore t :wk "Window")
      ;; window splits
      "w h" '(split-window-horizontally :wk "Horizontal split window")
      "w v" '(split-window-vertically :wk "Vertical split window")
      "w c" '(delete-window :wk "Close window")
      ;; window motions
      "w <left>" '(windmove-left :wk "Move to window on the left")
      "w <right>" '(windmove-right :wk "Move to window on the right")
      "w <up>" '(windmove-up :wk "Move to window above")
      "w <down>" '(windmove-down :wk "Move to window below")
      ;; move windows  
      "w S-<left>" '(buf-move-left :wk "Buffer move left")
      "w S-<right>" '(buf-move-right :wk "Buffer move right")
      "w S-<up>" '(buf-move-up :wk "Buffer move up")
      "w S-<down>" '(buf-move-down :wk "Buffer move down"))

  )

#+end_src

#+begin_src emacs-lisp

(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

#+end_src

* graphical user interface tweaks

** disable menubar, toolbars and scrollbars

#+begin_src emacs-lisp

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

#+end_src

** display line numbers and truncated lines

#+begin_src emacs-lisp

  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)

#+end_src

* all the icons
this is an icon set that can be used with emacs programs

#+begin_src emacs-lisp

  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure (:wait t)
    :demand t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

#+end_src

* ivy (counsel)
+ generic completion mechanism for emacs.
+ counsel is a collection of ivy-enhanced versions of common emacs commands
+ ivy-rich allows us to add descriptions alongside the command in M-x.

#+begin_src emacs-lisp

  (use-package counsel
    :after (ivy)
    :config (counsel-mode))

  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-resursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this get us descriptions in M-x
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))

#+end_src


* org mode

** enabling table of contents

#+begin_src emacs-lisp
  (use-package toc-org
    :ensure (:wait t)
    :demand t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** enabling org bullets
org-bullets gives us attractive bullets

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :ensure (:wait t)
    :demand t
    )
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode)))
#+end_src

** disable electric indent
org mode source blocks have some odd indentation behavior most likely realted to electric-indent-mode, let's turn it off

#+begin_src emacs-lisp

  (electric-indent-mode -1)
  
#+end_src

** source code block tag expansion
org-tempo is a module within org that allows for different types of expansions to save you time, here are some

| Expansion (with TAB) | Expands to ...                           |
|----------------------+------------------------------------------|
| <a                   | '#+BEGIN_EXPORT ascii' ... '#+END_EXPORT |
| <c                   | '#+BEGIN_CENTER' ... '#+END_CENTER'      |
| <C                   |                                          |
| <e                   |                                          |
| <E                   |                                          |
| <h                   |                                          |
| <l                   |                                          |
| <q                   |                                          |
| <s                   | '#+BEGIN_SRC' ... '#+END_SRC'            |
| <v                   | '#+BEGIN_VERSE' ... '#+END_VERSE'        |

#+begin_src emacs-lisp

  (require 'org-tempo)

#+end_src

* shells and terminals

** eshell
eshell is an emacs shell that is written in elisp

#+begin_src emacs-lisp

  ;; add syntax highlighting to eshell
  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; add eshellrc (like bashrc for eshell)
  ;; and alias file for eshell
  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands '("bash" "fish" "htop" "ssh" "top" "zsh"))

#+end_src

** vterm
vterm is a terminal emulator within emacs. We set the default vterm shell to zsh.
To install vterm in macos, while compiling I was getting the error CMake not found when CMake was installed in the system, to solve this I manually compiled vterm following the instruction in [[https://github.com/akermu/emacs-libvterm/issues/169#issuecomment-568668946][here]]:

1. ~cd ~/.emacs.d/elpaca/builds/vterm~
2. with CMake and libtool installed and accessible in path execute
   + ~mkdir -p build~
   + ~cd build~
   + ~cmake ..~
   + ~make~

you should be able to execute vterm in emacs now

#+begin_src emacs-lisp

  (use-package vterm
    :config
    (setq shell-file-name "/bin/zsh"
          vterm-max-scrollback 5000))

#+end_src

** vterm-toggle
vterm-toggle toggles between vterm buffeer and whatever buffer you are editing

#+begin_src emacs-lisp

  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullsreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   (reusable-frames . visible)
                   (window-height . 0.3))))

#+end_src

* rainbow mode
display actual color as background for any hex color value

#+begin_src emacs-lisp

  ;; enables rainbow-mode in all programming modes and org mode
  (use-package rainbow-mode
    :hook org-mode prog-mode)

#+end_src

* move text
MoveText allows you to move current line or region up/down with M-up/M-down or any other keybinding

#+begin_src emacs-lisp

  (use-package move-text
    :bind
    (("M-p" . move-text-up)
     ("M-n" . move-text-down)))

  (defun indent-region-advice (&rest ignored)
    (let ((deactivate deactivate-mark))
      (if (region-active-p)
          (indent-region (region-beginning) (region-end))
        (indent-region (line-beginning-position) (line-end-position)))
      (setq deactivate-mark deactivate)))

  (advice-add 'move-text-up :after 'indent-region-advice)
  (advice-add 'move-text-down :after 'indent-region-advice)

#+end_src

* theme
set theme directory and load chosen theme

#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  ;; above themes directory should have a .el file containing theme config
  ;; providing theme theme-name -> (provide-theme 'theme-name)
  ;; (load-theme 'theme-name t)

  ;; configure and load modus dark theme, to load ligh theme
  ;; use modus-operandi
  (require-theme 'modus-themes)
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil)
  ;; define some palette overrides, such as by using our presets
  (setq modus-themes-common-palette-overrides
        modus-themes-preset-overrides-intense)
  (load-theme 'modus-vivendi)
#+end_src

* which-key

#+begin_src emacs-lisp

  (use-package which-key
    :ensure (:wait t)
    :demand t
    :init
      (which-key-mode)
    :config
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slow -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " → "))

#+end_src
